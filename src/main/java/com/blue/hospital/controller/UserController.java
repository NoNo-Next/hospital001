package com.blue.hospital.controller;import com.blue.hospital.entity.Menu;import com.blue.hospital.entity.User;import com.blue.hospital.pojo.MenuPojo;import com.blue.hospital.pojo.UserAndPartment;import com.blue.hospital.service.MenuService;import com.blue.hospital.service.PositionMenuService;import com.blue.hospital.service.UserService;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.*;import org.apache.shiro.session.Session;import org.apache.shiro.subject.Subject;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.ModelAndView;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpSession;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;@Controllerpublic class UserController {    @Resource    UserService userService;    @Resource(name = "positionMenuServiceImpl")    PositionMenuService pms;    @Resource    MenuService menuService;    /**     * 登录路径     */    @RequestMapping("/")    public String doLogin(){        return "login";    }    @RequestMapping(value = "/doLogin", method = RequestMethod.GET)    public String loginPage() {        return "login";    }    @RequestMapping("/user/deleteById")    @ResponseBody    public Integer deleteById(User user) {        user.setState(1);        // 删除某个User用户(假删除)        Integer i = userService.delUserById(user);        return i;    }    @RequestMapping("/user/addUser")    @ResponseBody    public Integer addUser(User user) {        // 添加User用户        Integer i = userService.addUser(user);        return i;    }    @RequestMapping("/user/saveUpdateUser")    @ResponseBody    public Integer saveUpdateUser(User user) {        return userService.updateUserById(user);    }    /**     * 这是之前多表查询     *     * @param id     * @return     */    @RequestMapping("/user/getUserById")    @ResponseBody    public UserAndPartment getUserById(Integer id) {        // 根据id查询当前user的所有信息，这里仅考虑了department表的信息        List<UserAndPartment> list = userService.getUserAndPart(id);        if (list != null) {            return list.get(0);        }        return null;    }    @RequestMapping("/user/getById")    @ResponseBody    public User getByById(Integer uid) {        User user = userService.getUserById(uid);        return user;    }    @RequestMapping("/user/getUser")    @ResponseBody    public List<User> getUser() {        User u = new User();        List<User> list = userService.selectAll(u);        return list;    }    @RequestMapping(value = "/login")    @ResponseBody    public Map login(String userName, String userPwd, String code) {        Map<String,Object> result = new HashMap<String,Object>();        Subject subject = SecurityUtils.getSubject();        Session session = subject.getSession();        // 获取session域中的验证码信息        String randomCode = (String) session.getAttribute("codeNumber");        try {            if (!code.equals(randomCode)){                throw new Exception();            }        }catch (Exception e){            result.put("res","验证码错误");            return result;        }        // 执行认证登陆        // 在认证提交前准备 token（令牌）        UsernamePasswordToken token = new UsernamePasswordToken(userName, userPwd);        try {            subject.login(token);            subject.isRemembered();        } catch (UnknownAccountException uae) {            result.put("res","未知账户");            return result;        } catch (IncorrectCredentialsException ice) {            result.put("res","密码不正确");            return result;        } catch (LockedAccountException lae) {            result.put("res","账户已锁定");            return result;        } catch (ExcessiveAttemptsException eae) {            result.put("res","用户名或密码错误次数过多");            return result;        } catch (AuthenticationException ae) {            result.put("res","用户名或密码不正确");            return result;        }        if (subject.isAuthenticated()) {            result.put("res","登录成功");            return result;        } else {            token.clear();            result.put("res","用户名或密码不正确");            return result;        }    }    @RequestMapping("getMenu")    private ModelAndView getMenu(HttpSession session){        ModelAndView model = new ModelAndView();        User user = (User)session.getAttribute("user");        List<MenuPojo> menuList = allocateMenu(user);        // 传递权限菜单数据到主页面        model.addObject("menuList", menuList);        model.setViewName("index");        return  model;// 跳转到主页面    }    // 根据用户信息分配菜单的方法    private List<MenuPojo> allocateMenu(User user) {        Integer poId = user.getPostid();        // 根据岗位id查询对应权限菜单        List<Integer> menuIDs = pms.selectMenuByPoId(poId);        // 查询所有的菜单        List<Menu> list = menuService.queryByParentId(null);        // 匹配权限 什么样的职位id有什么样的菜单        List<MenuPojo> menuList = merge(menuIDs, list);        for (MenuPojo menuPojo : menuList) {            System.out.println(menuPojo.toString());        }        return menuList;    }    private List<MenuPojo> merge(List<Integer> menuIDs, List<Menu> list) {        List<MenuPojo> menuPojolist = new ArrayList<MenuPojo>();        if (list != null) {            // 遍历所有菜单，找出有权限的菜单            for (Menu menu : list) {                // 判断当前的菜单是否有权限                if (hasAuthority(menu, menuIDs)) {                    MenuPojo mp = new MenuPojo();                    mp.setMenuId(menu.getMenuid());                    mp.setHasAuthority(true);                    mp.setIsDelete(menu.getMenudelete());                    mp.setMenuImage(menu.getMenuimage());                    mp.setMenuLevel(menu.getMenulevel());                    mp.setMenuName(menu.getMenuname());                    mp.setMenuSort(menu.getMenusort());                    mp.setMenuUrl(menu.getMenuurl());                    mp.setParentId(menu.getParentid());                    mp.setChildMenuPojo(merge(menuIDs, menu.getChildMenu()));                    // 把对象添加到集合当中去                    // 这个mp就是有权限的菜单                    menuPojolist.add(mp);// 找到所有的，前端遍历                }            }        }        return menuPojolist;    }    /**     * 判断一个菜单是否有权限     *     * @param menu     * @param menuIDs     * @return     */    private boolean hasAuthority(Menu menu, List<Integer> menuIDs) {        if (menuIDs != null) {            for (Integer i : menuIDs) {                if (menu.getMenuid() == i) {                    return true;// 有权限                }            }        }        return false;// 没有权限    }    @RequestMapping("/loginOut")    public String getLoginout(HttpServletRequest request, HttpSession session){        try {            Subject subject = SecurityUtils.getSubject();            subject.logout();//使用logout方法退出登录            //清空session            session = request.getSession(true);            session.removeAttribute("user");            session.invalidate();        }catch (Exception e){        }        return "redirect:dologin";    }    //被踢出后跳转的页面    @RequestMapping(value = "/kickout", method = RequestMethod.GET)    public String kickOut() {        return "kickout";    }}